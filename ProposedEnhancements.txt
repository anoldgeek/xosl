
**************** DONE ****************
1. Allow chose of drive to write mbr too.
	Fixes:
	1. Default USB boot mount USB as drive C: preventing XOSL install. Abbility to select mbr drive would circumvent this.
	2. On systems with multiple drives, multiple XOSL installs can be made, selectable via bios boot chose.

	Implementation:
	Install\INSTALL
		FatInst.cpp
			int CFatInstall::InstallIpl(void *Ipl) 
			-> int CFatInstall::InstallIpl(void *Ipl, int Drive)
		Install.cpp
			int CInstaller::Install(CVesa::TGraphicsMode GraphicsMode, CMouse::TMouseType MouseType, const CDosDriveList::CDosDrive &DosDrive, bool PartMan, bool SmartBm)
			--> 
			int CInstaller::Install(CVesa::TGraphicsMode GraphicsMode, CMouse::TMouseType MouseType, const CDosDriveList::CDosDrive &DosDrive, bool PartMan, bool SmartBm, int MbrDrive)
			
			int CInstaller::Install(CVesa::TGraphicsMode GraphicsMode, CMouse::TMouseType MouseType, int PartIndex, bool PartMan, bool SmartBm)
			--> 
			int CInstaller::Install(CVesa::TGraphicsMode GraphicsMode, CMouse::TMouseType MouseType, int PartIndex, bool PartMan, bool SmartBm, int MbrDrive)
			
			int CInstaller::Uninstall(const CDosDriveList::CDosDrive &DosDrive, int OriginalMbr)
			--> 
			int CInstaller::Uninstall(const CDosDriveList::CDosDrive &DosDrive, int OriginalMbr, int Drive)
			
			int CInstaller::Uninstall(int PartIndex, int OriginalMbr)
			--> 
			int CInstaller::Uninstall(int PartIndex, int OriginalMbr, int Drive)
			
			int CInstaller::Restore(int PartIndex)
			--> 
			int CInstaller::Restore(int PartIndex, int Drive)

		\INSTALL\Menus.cpp
			TextUI.AddMenuItem(4,"Drv Type System              Size ","Partition to install XOSL 1.1.9 on",1,PartNameCount,(const char **)PartNameList,0);
			-->
			TextUI.AddMenuItem(4,"Drv Type System (for XOSL)   Size ","Partition to install XOSL 1.1.9 on",1,PartNameCount,(const char **)PartNameList,0);

			TextUI.AddMenuItem(10,"Start installation","Install Extended Operating System Loader 1.1.9",1);
			-->
			TextUI.AddMenuItem(12,"Start installation","Install Extended Operating System Loader 1.1.9",1);

			New
			TextUI.AddMenuItem(8,"Drv Type System (for MBR)    Size ","Drive to install XOSL 1.1.9 MBR on",1,PartNameCount,(const char **)PartNameList,0);

			TextUI.AddMenuItem(11,"Return to install menu","Return to install menu",1);
			TextUI.AddMenuItem(13,"Return to install menu","Return to install menu",1);

		\INSTALL\main.cpp
			int CApplication::StartInstallSep()
				add
				DriveMbr = InstallMenus.ResolvePartIndex(TextUI.GetOptionIndex(8));


		Partition = PartList.GetPartition(Index);
		MbrDrive=Partition->Drive
		MbrDrive = PartList.GetPartition(Index)->Drive

1. Completed for XOSL seperate partition install in xosl11a


2. Include XOSL118 fixes
2. Completed.

4. In "Add Boot Item" menu,fix patition size display to unsigned long instead of long.
4. Completed

5. Fix partition size display for large disks.
5. Completed.

6. Fix start of Alloc area to start at seg after end of BSS
6. Completed

XOSL11C

3. Install assumes a fixed count of XOSLIMGx.XXF files.
	\install\install\FatInst.cpp line 129
		int CFatInstall::InstallFiles(const CDosDriveList::CDosDrive &DosDrive)
	\install\install\Files.cpp line 83
		const char *CXoslFiles::FileList[] = {
	\install\install\Files.cpp line 142
		int CFsCreator::PackFiles()
	Suggested fix:

	next="1"
	copyok=0
	do
		nextfile=XOSLIMG${next}.XXF
		delete old nextfile  // don't care if it fails
		if exists new nextfile
			if copy new nextfile
			     copyok=1
			 else
			     copyok=-1
			 fi
		else
			copyok=2
		fi
	while copyok==1
	if copyok==-1
		msg failed to copy nextfile
		abort
	fi
XOSL11D

7. Ipl_brec assumes a maxiumum size of XOSLLOAD.XCF of 8192. It is now bigger!!
	Get size from directory enrty?
XOSL11E

8. Fix date/time settings of files in sep install. 
9. Fixed and tested for sep, FAT32 and FAT16
10. Fix smartbootloader "not enough memory" on install. OK with freedos probably issue with dos 6.22 config
XOSL11F

12. Fix install restore and delete, where xosl installed in HD other than HD0 in sep installs.
	Store which HD the mbr is written to during install in a new item CBootItemFile.MbrHDSector0 and retrieve it for display on restore and delete action.
	Need special refresh on partition change to update currently selected MbrHDSector0.
	Extra parameter to TextUI.AddMenuItem for partition selection, to pass current MbrHDSector0? 
	Textlist.cpp
		HandleKeyAction
			Handles key input for currently selected item via ItemIndex.
		CTextList::Refresh
			Refreshes all ListItems. The list ite index is determined by the first parameter of TextUI.AddMenuItem in menus.cpp
		Solution:
			Added new int LinkedListItemIndex ;  to class CListItem in TextList.h line 53
			Revert change to CTextList::AddItem at line 62 in TextList.cpp Replace OptionIndex with int LinkedListItemIndex = -1.
			Revert change to  CTextList::AddItem at line 83 replacing OptionIndex with 0.
			Add Node->LinkedListItemIndex = LinkedListItemIndex; after line 83.
			Before Refresh in PAGE_UP & PAGE_DOWN in HandleKeyAction
				if (LinkedListItemIndex != -1){
					// Set the index on the linked item
					TextUI.SetOptionIndex(LinkedListItem, CInstallMenus.MbrHDSector0List[LinkedListItem]);
				}
	
XOSL11G
	
13. Enable install of XOSL as chain load only (Do not install Sector 0 Mbr)
XOSL11H

14. Create upgrade option.
	Save existing config files ( boot items BOOTITEM.XDF; preferences XOSLDATA.XDF ). 
	Convert to new release and restore after install OR update existing files to new release and avoid installing new ones.
XOSL120a1	

15. Fix updating partlist when returning to main memu after installing XOSL
XOSL120a2

16. Migrate to Openwatcom 2.0. long long (64bit long) required for gpt disks.
XOSL130a3

**************** TODO ****************

17. Add boot from GPT via bios (msdos).
	Install
		Add gpt disk and partition types to selection list.
	ipl_brec
		Add gpt disk and partition type.

18. Add boot via UEFI
	Use System Rescue kernel with stub to switch to real mode, load xoslloader and excute.

19. Add install via UEFI
	Use System Rescue kernel with stub to switch to real mode, load Install(er) and excute.

20. Boot Windows on gpt disk.
