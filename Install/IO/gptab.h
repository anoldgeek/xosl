

#ifndef _GPTTAB_
#define _GPTTAB_

typedef unsigned char __u8;

#define UUID_SIZE 16

/*
typedef struct 
{
	unsigned char b[16];
};
*/

typedef struct {
        __u8 b[UUID_SIZE];
} uuid_t;

/*
#define UUID_INIT(a, b, c, d0, d1, d2, d3, d4, d5, d6, d7)                      \
((uuid_t)                                                               \
{{ ((a) >> 24) & 0xff, ((a) >> 16) & 0xff, ((a) >> 8) & 0xff, (a) & 0xff, \
   ((b) >> 8) & 0xff, (b) & 0xff,                                       \
   ((c) >> 8) & 0xff, (c) & 0xff,                                       \
   (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }})
*/

/*
#define UUID_INIT(a, b, c, d, e)                      \
((uuid_t)                                                               \
{{ ((a) >> 24) & 0xff, ((a) >> 16) & 0xff, ((a) >> 8) & 0xff, (a) & 0xff, \
   ((b) >> 8) & 0xff, (b) & 0xff,                                       \
   ((c) >> 8) & 0xff, (c) & 0xff,                                       \
   (d) & 0xff, ((d) >> 8) & 0xff,										\
   (e) & 0xff, ((e) >> 8 ) & 0xff, ((e) >> 16) & 0xff, ((e) >> 24 ) & 0xff, ((e) >> 32) & 0xff, ((e) >> 36) & 0xff }})
*/

/*
#define UUID_INIT(a, b, c, d, e)                      \
                                                             \
{ ((a) >> 24) & 0xff, ((a) >> 16) & 0xff, ((a) >> 8) & 0xff, (a) & 0xff, \
   ((b) >> 8) & 0xff, (b) & 0xff,                                       \
   ((c) >> 8) & 0xff, (c) & 0xff,                                       \
   (d) & 0xff, ((d) >> 8) & 0xff,										\
   (e) & 0xff, ((e) >> 8 ) & 0xff, ((e) >> 16) & 0xff, ((e) >> 24 ) & 0xff, ((e) >> 32) & 0xff, ((e) >> 36) & 0xff }
*/

#define UUID_INIT(a, b, c, d0, d1, d2, d3, d4, d5, d6, d7)                      \
                                                               \
{ ((a) >> 24) & 0xff, ((a) >> 16) & 0xff, ((a) >> 8) & 0xff, (a) & 0xff, \
   ((b) >> 8) & 0xff, (b) & 0xff,                                       \
   ((c) >> 8) & 0xff, (c) & 0xff,                                       \
   (d0), (d1), (d2), (d3), (d4), (d5), (d6), (d7) }

/*
 * The length of a UUID string ("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
 * not including trailing NUL.
 */
#define UUID_STRING_LEN         36


typedef unsigned short uint16_t;

//typedef uuid_t GUIDData;

typedef struct S_gpt_fstype
{
	uint16_t MBRType;
	uuid_t GUIDype;
	char Name[80];
} gpt_fstype_t ;

/*
char test2[] = { 0x63, 0x61, 0x74, 0x00 };

char test3[] = { ((0xEBD0A0A2) >> 24) & 0xff, 0x61, 0x74, 0x00 };

uuid_t test6[UUID_SIZE] =  UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87, 0xC0, 0x68, 0xB6, 0xB7, 0x26, 0x99, 0xC7);


gpt_fstype_t test7[ ] = { \
	{\
		0x0100,\
		UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0, 0x68,0xB6,0xB7,0x26,0x99,0xC7),\
		"Microsoft basic data"} \
	};
*/

gpt_fstype_t  gpt_fstypes[ ] = 
{
	// Copied from gptfdisk

   // Start with the "unused entry," which should normally appear only
   // on empty partition table entries....
  {0x0000, UUID_INIT(0x00000000, 0x0000, 0x0000, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00), "Unused entry"},

   // DOS/Windows partition types, most of which are hidden from the UUID_INIT(0xL" listing
   // (they're available mainly for MBR, 0xto, 0xGPT conversions).
  {0x0100, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // FAT, 0x12
  {0x0400, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // FAT, 0x16 < 32M
  {0x0600, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // FAT, 0x16
  {0x0700, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // NTFS (or HPFS)
  {0x0b00, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // FAT, 0x32
  {0x0c00, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // FAT, 0x32 LBA
  {0x0c01, UUID_INIT(0xE3C9E316, 0x0B5C, 0x4DB8, 0x81,0x7D,0xF9,0x2D,0xF0,0x02,0x15,0xAE), "Microsoft reserved"},
  {0x0e00, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // FAT, 0x16 LBA
  {0x1100, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden FAT, 0x12
  {0x1400, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden FAT, 0x16 < 32M
  {0x1600, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden FAT, 0x16
  {0x1700, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden NTFS (or HPFS)
  {0x1b00, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden FAT, 0x32
  {0x1c00, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden FAT, 0x32 LBA
  {0x1e00, UUID_INIT(0xEBD0A0A2, 0xB9E5, 0x4433, 0x87,0xC0,0x68,0xB6,0xB7,0x26,0x99,0xC7), "Microsoft basic data"}, // Hidden FAT, 0x16 LBA
  {0x2700, UUID_INIT(0xDE94BBA4, 0x06D1, 0x4D40, 0xA1,0x6A,0xBF,0xD5,0x01,0x79,0xD6,0xAC), "Windows RE"},

   // Open Network Install Environment (ONIE) specific types.
   // See http://www.onie.org/ and
   // https://github.com/opencomputeproject/onie/blob/master/patches/gptfdisk/add, 0xonie, 0xpartition, 0xtypes.patch
  {0x3000, UUID_INIT(0x7412F7D5, 0xA156, 0x4B13, 0x81,0xDC,0x86,0x71,0x74,0x92,0x93,0x25), "ONIE boot"},
  {0x3001, UUID_INIT(0xD4E6E2CD, 0x4469, 0x46F3, 0xB5,0xCB,0x1B,0xFF,0x57,0xAF,0xC1,0x49), "ONIE config"},

   // Plan 9; see http://man.cat, 0xv.org/9front/8/prep
  {0x3900, UUID_INIT(0xC91818F9, 0x8025, 0x47AF, 0x89,0xD2,0xF0,0x30,0xD7,0x00,0x0C,0x2C), "Plan 9"},

   // PowerPC reference platform boot partition
  {0x4100, UUID_INIT(0x9E1A2D38, 0xC612, 0x4316, 0xAA,0x26,0x8B,0x49,0x52,0x1E,0x5A,0x8B), "PowerPC PReP boot"},

   // Windows LDM ("dynamic disk") types
  {0x4200, UUID_INIT(0xAF9B60A0, 0x1431, 0x4F62, 0xBC,0x68,0x33,0x11,0x71,0x4A,0x69,0xAD), "Windows LDM data"}, // Logical disk manager
  {0x4201, UUID_INIT(0x5808C8AA, 0x7E8F, 0x42E0, 0x85,0xD2,0xE1,0xE9,0x04,0x34,0xCF,0xB3), "Windows LDM metadata"}, // Logical disk manager
  {0x4202, UUID_INIT(0xE75CAF8F, 0xF680, 0x4CEE, 0xAF,0xA3,0xB0,0x01,0xE5,0x6E,0xFC,0x2D), "Windows Storage Spaces"}, // A newer LDM, 0xtype setup

   // An oddball IBM filesystem....
  {0x7501, UUID_INIT(0x37AFFC90, 0xEF7D, 0x4E96, 0x91,0xC3,0x2D,0x7A,0xE0,0x55,0xB1,0x74), "IBM GPFS"}, // General Parallel File System (GPFS)

   // ChromeOS, 0xspecific partition types...
   // Values taken from vboot_reference/firmware/lib/cgptlib/include/gpt.h in
   // ChromeOS source code, retrieved 12/23/2010. They're also at
   // http://www.chromium.org/chromium, 0xos/chromiumos, 0xdesign, 0xdocs/disk, 0xformat.
   // These have no MBR equivalents, AFAIK, so I'm using 0x7Fxx values, since they're close
   // to the Linux values.
  {0x7f00, UUID_INIT(0xFE3A2A5D, 0x4F32, 0x41A7, 0xB7,0x25,0xAC,0xCC,0x32,0x85,0xA3,0x09), "ChromeOS kernel"},
  {0x7f01, UUID_INIT(0x3CB8E202, 0x3B7E, 0x47DD, 0x8A,0x3C,0x7F,0xF2,0xA1,0x3C,0xFC,0xEC), "ChromeOS root"},
  {0x7f02, UUID_INIT(0x2E0A753D, 0x9E48, 0x43B0, 0x83,0x37,0xB1,0x51,0x92,0xCB,0x1B,0x5E), "ChromeOS reserved"},

   // Linux, 0xspecific partition types....
  {0x8200, UUID_INIT(0x0657FD6D, 0xA4AB, 0x43C4, 0x84,0xE5,0x09,0x33,0xC8,0x4B,0x4F,0x4F), "Linux swap"}, // Linux swap (or Solaris on MBR)
  {0x8300, UUID_INIT(0x0FC63DAF, 0x8483, 0x4772, 0x8E,0x79,0x3D,0x69,0xD8,0x47,0x7D,0xE4), "Linux filesystem"}, // Linux native
  {0x8301, UUID_INIT(0x8DA63339, 0x0007, 0x60C0, 0xC4,0x36,0x08,0x3A,0xC8,0x23,0x09,0x08), "Linux reserved"},
   // See http://www.freedesktop.org/software/systemd/man/systemd, 0xgpt, 0xauto, 0xgenerator.html
   // and http://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/
  {0x8302, UUID_INIT(0x933AC7E1, 0x2EB4, 0x4F13, 0xB8,0x44,0x0E,0x14,0xE2,0xAE,0xF9,0x15), "Linux /home"}, // Linux /home (auto, 0xmounted by systemd)
  {0x8303, UUID_INIT(0x44479540, 0xF297, 0x41B2, 0x9A,0xF7,0xD1,0x31,0xD5,0xF0,0x45,0x8A), "Linux x86 root (/)"}, // Linux / on x86 (auto, 0xmounted by systemd)
  {0x8304, UUID_INIT(0x4F68BCE3, 0xE8CD, 0x4DB1, 0x96,0xE7,0xFB,0xCA,0xF9,0x84,0xB7,0x09), "Linux x86, 0x64 root (/)"}, // Linux / on x86, 0x64 (auto, 0xmounted by systemd)
  {0x8305, UUID_INIT(0xB921B045, 0x1DF0, 0x41C3, 0xAF,0x44,0x4C,0x6F,0x28,0x0D,0x3F,0xAE), "Linux ARM64 root (/)"}, // Linux / on 64, 0xbit ARM (auto, 0xmounted by systemd)
  {0x8306, UUID_INIT(0x3B8F8425, 0x20E0, 0x4F3B, 0x90,0x7F,0x1A,0x25,0xA7,0x6F,0x98,0xE8), "Linux /srv"}, // Linux /srv (auto, 0xmounted by systemd)
  {0x8307, UUID_INIT(0x69DAD710, 0x2CE4, 0x4E3C, 0xB1,0x6C,0x21,0xA1,0xD4,0x9A,0xBE,0xD3), "Linux ARM32 root (/)"}, // Linux / on 32, 0xbit ARM (auto, 0xmounted by systemd)

   // Used by Intel Rapid Start technology
  {0x8400, UUID_INIT(0xD3BFE2DE, 0x3DAF, 0x11DF, 0xBA,0x40,0xE3,0xA5,0x56,0xD8,0x95,0x93), "Intel Rapid Start"},

   // Another Linux type code....
  {0x8e00, UUID_INIT(0xE6D6D379, 0xF507, 0x44C2, 0xA2,0x3C,0x23,0x8F,0x2A,0x3D,0xF9,0x28), "Linux LVM"},

   // Android type codes....
  {0xa000, UUID_INIT(0x2568845D, 0x2332, 0x4675, 0xBC,0x39,0x8F,0xA5,0xA4,0x74,0x8D,0x15), "Android bootloader"},
  {0xa001, UUID_INIT(0x114EAFFE, 0x1552, 0x4022, 0xB2,0x6E,0x9B,0x05,0x36,0x04,0xCF,0x84), "Android bootloader 2"},
  {0xa002, UUID_INIT(0x49A4D17F, 0x93A3, 0x45C1, 0xA0,0xDE,0xF5,0x0B,0x2E,0xBE,0x25,0x99), "Android boot"},
  {0xa003, UUID_INIT(0x4177C722, 0x9E92, 0x4AAB, 0x86,0x44,0x43,0x50,0x2B,0xFD,0x55,0x06), "Android recovery"},
  {0xa004, UUID_INIT(0xEF32A33B, 0xA409, 0x486C, 0x91,0x41,0x9F,0xFB,0x71,0x1F,0x62,0x66), "Android misc"},
  {0xa005, UUID_INIT(0x20AC26BE, 0x20B7, 0x11E3, 0x84,0xC5,0x6C,0xFD,0xB9,0x47,0x11,0xE9), "Android metadata"},
  {0xa006, UUID_INIT(0x38F428E6, 0xD326, 0x425D, 0x91,0x40,0x6E,0x0E,0xA1,0x33,0x64,0x7C), "Android system"},
  {0xa007, UUID_INIT(0xA893EF21, 0xE428, 0x470A, 0x9E,0x55,0x06,0x68,0xFD,0x91,0xA2,0xD9), "Android cache"},
  {0xa008, UUID_INIT(0xDC76DDA9, 0x5AC1, 0x491C, 0xAF,0x42,0xA8,0x25,0x91,0x58,0x0C,0x0D), "Android data"},
  {0xa009, UUID_INIT(0xEBC597D0, 0x2053, 0x4B15, 0x8B,0x64,0xE0,0xAA,0xC7,0x5F,0x4D,0xB1), "Android persistent"},
  {0xa00a, UUID_INIT(0x8F68CC74, 0xC5E5, 0x48DA, 0xBE,0x91,0xA0,0xC8,0xC1,0x5E,0x9C,0x80), "Android factory"},
  {0xa00b, UUID_INIT(0x767941D0, 0x2085, 0x11E3, 0xAD,0x3B,0x6C,0xFD,0xB9,0x47,0x11,0xE9), "Android fastboot/tertiary"},
  {0xa00c, UUID_INIT(0xAC6D7924, 0xEB71, 0x4DF8, 0xB4,0x8D,0xE2,0x67,0xB2,0x71,0x48,0xFF), "Android OEM"},

   // FreeBSD partition types....
   // Note: Rather than extract FreeBSD disklabel data, convert FreeBSD
   // partitions in, 0xplace, and let FreeBSD sort out the details....
  {0xa500, UUID_INIT(0x516E7CB4, 0x6ECF, 0x11D6, 0x8F,0xF8,0x00,0x02,0x2D,0x09,0x71,0x2B), "FreeBSD disklabel"},
  {0xa501, UUID_INIT(0x83BD6B9D, 0x7F41, 0x11DC, 0xBE,0x0B,0x00,0x15,0x60,0xB8,0x4F,0x0F), "FreeBSD boot"},
  {0xa502, UUID_INIT(0x516E7CB5, 0x6ECF, 0x11D6, 0x8F,0xF8,0x00,0x02,0x2D,0x09,0x71,0x2B), "FreeBSD swap"},
  {0xa503, UUID_INIT(0x516E7CB6, 0x6ECF, 0x11D6, 0x8F,0xF8,0x00,0x02,0x2D,0x09,0x71,0x2B), "FreeBSD UFS"},
  {0xa504, UUID_INIT(0x516E7CBA, 0x6ECF, 0x11D6, 0x8F,0xF8,0x00,0x02,0x2D,0x09,0x71,0x2B), "FreeBSD ZFS"},
  {0xa505, UUID_INIT(0x516E7CB8, 0x6ECF, 0x11D6, 0x8F,0xF8,0x00,0x02,0x2D,0x09,0x71,0x2B), "FreeBSD Vinum/RAID"},

   // Midnight BSD partition types....
  {0xa580, UUID_INIT(0x85D5E45A, 0x237C, 0x11E1, 0xB4,0xB3,0xE8,0x9A,0x8F,0x7F,0xC3,0xA7), "Midnight BSD data"},
  {0xa581, UUID_INIT(0x85D5E45E, 0x237C, 0x11E1, 0xB4,0xB3,0xE8,0x9A,0x8F,0x7F,0xC3,0xA7), "Midnight BSD boot"},
  {0xa582, UUID_INIT(0x85D5E45B, 0x237C, 0x11E1, 0xB4,0xB3,0xE8,0x9A,0x8F,0x7F,0xC3,0xA7), "Midnight BSD swap"},
  {0xa583, UUID_INIT(0x0394Ef8B, 0x237E, 0x11E1, 0xB4,0xB3,0xE8,0x9A,0x8F,0x7F,0xC3,0xA7), "Midnight BSD UFS"},
  {0xa584, UUID_INIT(0x85D5E45D, 0x237C, 0x11E1, 0xB4,0xB3,0xE8,0x9A,0x8F,0x7F,0xC3,0xA7), "Midnight BSD ZFS"},
  {0xa585, UUID_INIT(0x85D5E45C, 0x237C, 0x11E1, 0xB4,0xB3,0xE8,0x9A,0x8F,0x7F,0xC3,0xA7), "Midnight BSD Vinum"},

   // OpenBSD partition type....
  {0xa600, UUID_INIT(0x824CC7A0, 0x36A8, 0x11E3, 0x89,0x0A,0x95,0x25,0x19,0xAD,0x3F,0x61), "OpenBSD disklabel"},

   // A MacOS partition type, separated from others by NetBSD partition types...
  {0xa800, UUID_INIT(0x55465300, 0x0000, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Apple UFS"}, // Mac OS X

   // NetBSD partition types. Note that the main entry sets it up as a
   // FreeBSD disklabel. I'm not 100% certain this is the correct behavior.
  {0xa900, UUID_INIT(0x516E7CB4, 0x6ECF, 0x11D6, 0x8F,0xF8,0x00,0x02,0x2D,0x09,0x71,0x2B), "FreeBSD disklabel"}, // NetBSD disklabel
  {0xa901, UUID_INIT(0x49F48D32, 0xB10E, 0x11DC, 0xB9,0x9B,0x00,0x19,0xD1,0x87,0x96,0x48), "NetBSD swap"},
  {0xa902, UUID_INIT(0x49F48D5A, 0xB10E, 0x11DC, 0xB9,0x9B,0x00,0x19,0xD1,0x87,0x96,0x48), "NetBSD FFS"},
  {0xa903, UUID_INIT(0x49F48D82, 0xB10E, 0x11DC, 0xB9,0x9B,0x00,0x19,0xD1,0x87,0x96,0x48), "NetBSD LFS"},
  {0xa904, UUID_INIT(0x2DB519C4, 0xB10F, 0x11DC, 0xB9,0x9B,0x00,0x19,0xD1,0x87,0x96,0x48), "NetBSD concatenated"},
  {0xa905, UUID_INIT(0x2DB519EC, 0xB10F, 0x11DC, 0xB9,0x9B,0x00,0x19,0xD1,0x87,0x96,0x48), "NetBSD encrypted"},
  {0xa906, UUID_INIT(0x49F48DAA, 0xB10E, 0x11DC, 0xB9,0x9B,0x00,0x19,0xD1,0x87,0x96,0x48), "NetBSD RAID"},

   // Mac OS partition types (See also 0xa800, above)....
  {0xab00, UUID_INIT(0x426F6F74, 0x0000, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Recovery HD"},
  {0xaf00, UUID_INIT(0x48465300, 0x0000, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Apple HFS/HFS+"},
  {0xaf01, UUID_INIT(0x52414944, 0x0000, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Apple RAID"},
  {0xaf02, UUID_INIT(0x52414944, 0x5F4F, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Apple RAID offline"},
  {0xaf03, UUID_INIT(0x4C616265, 0x6C00, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Apple label"},
  {0xaf04, UUID_INIT(0x5265636F, 0x7665, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "AppleTV recovery"},
  {0xaf05, UUID_INIT(0x53746F72, 0x6167, 0x11AA, 0xAA,0x11,0x00,0x30,0x65,0x43,0xEC,0xAC), "Apple Core Storage"},
  {0xaf06, UUID_INIT(0xB6FA30DA, 0x92D2, 0x4A9A, 0x96,0xF1,0x87,0x1E,0xC6,0x48,0x62,0x00), "Apple SoftRAID Status"},
  {0xaf07, UUID_INIT(0x2E313465, 0x19B9, 0x463F, 0x81,0x26,0x8A,0x79,0x93,0x77,0x38,0x01), "Apple SoftRAID Scratch"},
  {0xaf08, UUID_INIT(0xFA709C7E, 0x65B1, 0x4593, 0xBF,0xD5,0xE7,0x1D,0x61,0xDE,0x9B,0x02), "Apple SoftRAID Volume"},
  {0xaf09, UUID_INIT(0xBBBA6DF5, 0xF46F, 0x4A89, 0x8F,0x59,0x87,0x65,0xB2,0x72,0x75,0x03), "Apple SoftRAID Cache"},
   // QNX Power, 0xSafe (QNX6)
  {0xb300, UUID_INIT(0xCEF5A9AD, 0x73BC, 0x4601, 0x89,0xF3,0xCD,0xEE,0xEE,0xE3,0x21,0xA1), "QNX6 Power, 0xSafe"},

   // Acronis Secure Zone
  {0xbc00, UUID_INIT(0x0311FC50, 0x01CA, 0x4725, 0xAD,0x77,0x9A,0xDB,0xB2,0x0A,0xCE,0x98), "Acronis Secure Zone"},

   // Solaris partition types (one of which is shared with MacOS)
  {0xbe00, UUID_INIT(0x6A82CB45, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris boot"},
  {0xbf00, UUID_INIT(0x6A85CF4D, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris root"},
  {0xbf01, UUID_INIT(0x6A898CC3, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris /usr & Mac ZFS"}, // Solaris/MacOS
  {0xbf02, UUID_INIT(0x6A87C46F, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris swap"},
  {0xbf03, UUID_INIT(0x6A8B642B, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris backup"},
  {0xbf04, UUID_INIT(0x6A8EF2E9, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris /var"},
  {0xbf05, UUID_INIT(0x6A90BA39, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris /home"},
  {0xbf06, UUID_INIT(0x6A9283A5, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris alternate sector"},
  {0xbf07, UUID_INIT(0x6A945A3B, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris Reserved 1"},
  {0xbf08, UUID_INIT(0x6A9630D1, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris Reserved 2"},
  {0xbf09, UUID_INIT(0x6A980767, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris Reserved 3"},
  {0xbf0a, UUID_INIT(0x6A96237F, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris Reserved 4"},
  {0xbf0b, UUID_INIT(0x6A8D2AC7, 0x1DD2, 0x11B2, 0x99,0xA6,0x08,0x00,0x20,0x73,0x66,0x31), "Solaris Reserved 5"},

   // I can find no MBR equivalents for these, but they're on the
   // Wikipedia page for GPT, so here we go....
  {0xc001, UUID_INIT(0x75894C1E, 0x3AEB, 0x11D3, 0xB7,0xC1,0x7B,0x03,0xA0,0x00,0x00,0x00), "HP, 0xUX data"},
  {0xc002, UUID_INIT(0xE2A1E728, 0x32E3, 0x11D6, 0xA6,0x82,0x7B,0x03,0xA0,0x00,0x00,0x00), "HP, 0xUX service"},

   // Open Network Install Environment (ONIE) partitions....
  {0xe100, UUID_INIT(0x7412F7D5, 0xA156, 0x4B13, 0x81,0xDC,0x86,0x71,0x74,0x92,0x93,0x25), "ONIE boot"},
  {0xe101, UUID_INIT(0xD4E6E2CD, 0x4469, 0x46F3, 0xB5,0xCB,0x1B,0xFF,0x57,0xAF,0xC1,0x49), "ONIE config"},

   // See http://www.freedesktop.org/wiki/Specifications/BootLoaderSpec
  {0xea00, UUID_INIT(0xBC13C2FF, 0x59E6, 0x4262, 0xA3,0x52,0xB2,0x75,0xFD,0x6F,0x71,0x72), "Freedesktop $BOOT"},

   // Type code for Haiku; uses BeOS MBR code as hex code base
  {0xeb00, UUID_INIT(0x42465331, 0x3BA3, 0x10F1, 0x80,0x2A,0x48,0x61,0x69,0x6B,0x75,0x21), "Haiku BFS"},

   // Manufacturer, 0xspecific ESP, 0xlike partitions (in order in which they were a,0x,0x,0x,0x,0xdd,0xed)
  {0xed00, UUID_INIT(0xF4019732, 0x066E, 0x4E12, 0x82,0x73,0x34,0x6C,0x56,0x41,0x49,0x4F), "Sony system partition"},
  {0xed01, UUID_INIT(0xBFBFAFE7, 0xA34F, 0x448A, 0x9A,0x5B,0x62,0x13,0xEB,0x73,0x6C,0x22), "Lenovo system partition"},

   // EFI system and related partitions
  {0xef00, UUID_INIT(0xC12A7328, 0xF81F, 0x11D2, 0xBA,0x4B,0x00,0xA0,0xC9,0x3E,0xC9,0x3B), "EFI System"}, // Parted identifies these as having the "boot flag" set
  {0xef01, UUID_INIT(0x024DEE41, 0x33E7, 0x11D3, 0x9D,0x69,0x00,0x08,0xC7,0x81,0xF3,0x9F), "MBR partition scheme"}, // Used to nest MBR in GPT
  {0xef02, UUID_INIT(0x21686148, 0x6449, 0x6E6F, 0x74,0x4E,0x65,0x65,0x64,0x45,0x46,0x49), "BIOS boot partition"}, // Used by GRUB

   // Ceph type codes; see https://github.com/ceph/ceph/blob/9bcc42a3e6b08521694b5c0228b2c6ed7b3d312e/src/ceph, 0xdisk#L76, 0xL81
  {0xf800, UUID_INIT(0x4FBD7E29, 0x9D25, 0x41B8, 0xAF,0xD0,0x06,0x2C,0x0C,0xEF,0xF0,0x5D), "Ceph OSD"}, // Ceph Object Storage Daemon
  {0xf801, UUID_INIT(0x4FBD7E29, 0x9D25, 0x41B8, 0xAF,0xD0,0x5E,0xC0,0x0C,0xEF,0xF0,0x5D), "Ceph dm, 0xcrypt OSD"}, // Ceph Object Storage Daemon (encrypted)
  {0xf802, UUID_INIT(0x45B0969E, 0x9B03, 0x4F30, 0xB4,0xC6,0xB4,0xB8,0x0C,0xEF,0xF1,0x06), "Ceph journal"},
  {0xf803, UUID_INIT(0x45B0969E, 0x9B03, 0x4F30, 0xB4,0xC6,0x5E,0xC0,0x0C,0xEF,0xF1,0x06), "Ceph dm, 0xcrypt journal"},
  {0xf804, UUID_INIT(0x89C57F98, 0x2FE5, 0x4DC0, 0x89,0xC1,0xF3,0xAD,0x0C,0xEF,0xF2,0xBE), "Ceph disk in creation"},
  {0xf805, UUID_INIT(0x89C57F98, 0x2FE5, 0x4DC0, 0x89,0xC1,0x5E,0xC0,0x0C,0xEF,0xF2,0xBE), "Ceph dm, 0xcrypt disk in creation"},

   // VMWare ESX partition types codes
  {0xfb00, UUID_INIT(0xAA31E02A, 0x400F, 0x11DB, 0x95,0x90,0x00,0x0C,0x29,0x11,0xD1,0xB8), "VMWare VMFS"},
  {0xfb01, UUID_INIT(0x9198EFFC, 0x31C0, 0x11DB, 0x8F,0x78,0x00,0x0C,0x29,0x11,0xD1,0xB8), "VMWare reserved"},
  {0xfc00, UUID_INIT(0x9D275380, 0x40AD, 0x11DB, 0xBF,0x97,0x00,0x0C,0x29,0x11,0xD1,0xB8), "VMWare kcore crash protection"},

   // A straggler Linux partition type....
  {0xfd00, UUID_INIT(0xA19D880F, 0x05FC, 0x4D3B, 0xA0,0x06,0x74,0x3F,0x0F,0x84,0x91,0x1E), "Linux RAID"}


};


#endif
